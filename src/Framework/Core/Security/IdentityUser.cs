using Microsoft.Extensions.Primitives;
using Ngx.Monorepo.Framework.Core.Extensions;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Ngx.Monorepo.Framework.Core.Security
{
    /// <summary>
    /// Encapsulates the current identity user for the request.  The data in this class is
    /// populated out of claims generated by Identity Server (B2B/B2C) and forwarded by Ocelot.
    /// </summary>
    public class IdentityUser
    {
        /// <summary>
        /// The current users Id in Identity Server.
        /// </summary>
        public Guid UserId { get; private set; }

        /// <summary>
        /// The Id of the Tenant this user belongs too.
        /// </summary>
        public Guid TenantId { get; private set; }

        /// <summary>
        /// The name of the Tenant this user belongs too.
        /// </summary>
        public string TenantName { get; private set; }

        /// <summary>
        /// The full name of the Tenant this user belongs too.
        /// </summary>
        public string TenantDisplayName { get; private set; }

        /// <summary>
        /// The email of the current user in Identity Server.
        /// </summary>
        public string Email { get; private set; }

        /// <summary>
        /// Given name of the current user.  FirstName + LastName in Identity Server.
        /// </summary>
        public string GivenName { get; private set; }

        /// <summary>
        /// First name of the current user. 
        /// </summary>
        public string FirstName { get; private set; }

        /// <summary>
        /// Last name of the current user. 
        /// </summary>
        public string LastName { get; private set; }

        /// <summary>
        /// Products that the current user has or has had in the past.  
        /// If IsActive is false the user no longer has access to that product.
        /// </summary>
        public IReadOnlyList<UserProduct> Products { get; private set; }

        /// <summary>
        /// Roles that the current user has.
        /// </summary>
        public IReadOnlyList<Guid> Roles { get; private set; }

        /// <summary>
        /// Permissions that the current user has.
        /// </summary>
        public IReadOnlyDictionary<string, List<string>> Permissions { get; private set; }

        /// <summary>
        /// Indicated if the user info was already populated
        /// </summary>
        public bool IsLoaded { get; private set; }

        /// <summary>
        /// Sets the current user values.
        /// </summary>
        /// <param name="userId"><see cref="UserId"/></param>
        /// <param name="tenantId"><see cref="TenantId"/></param>
        /// <param name="tenantName"><see cref="TenantName"/></param>
        /// <param name="email"><see cref="Email"/></param>
        /// <param name="givenName"><see cref="GivenName"/></param>
        /// <param name="products"><see cref="Products"/></param>
        /// <exception cref="InvalidOperationException">
        /// Thrown when method is called on an already populated IdentityUser.
        /// Since this data is for the current user of the request it cannot be changed as the source of a request cannot change.
        /// </exception>
        /// <exception cref="ArgumentException">Thrown if UserId or TenantId is a default guid (all 0s).</exception>
        /// <exception cref="ArgumentNullException">Thrown if TenantName, Email, or GivenName is null or empty.</exception>
        public void SetUser(
            Guid userId,
            Guid tenantId,
            string tenantName,
            string tenantDisplayName,
            string email,
            string givenName,
            string firstName,
            string lastName,
            IList<UserProduct> products,
            IList<Guid> roles,
            Dictionary<string, List<string>> permissions)
        {
            if (userId == default) throw new ArgumentException("Value cannot be default.", nameof(userId));
            if (tenantId == default) throw new ArgumentException("Value cannot be default.", nameof(tenantId));
            if (string.IsNullOrEmpty(tenantName)) throw new ArgumentNullException(nameof(tenantName));
            if (string.IsNullOrEmpty(tenantDisplayName)) throw new ArgumentNullException(nameof(tenantDisplayName));
            if (string.IsNullOrEmpty(email)) throw new ArgumentNullException(nameof(email));
            if (string.IsNullOrEmpty(givenName)) throw new ArgumentNullException(givenName);
            if (string.IsNullOrEmpty(firstName)) throw new ArgumentNullException(firstName);
            if (string.IsNullOrEmpty(lastName)) throw new ArgumentNullException(lastName);

            UserId = userId;
            TenantId = tenantId;
            TenantName = tenantName;
            TenantDisplayName = tenantDisplayName;
            Email = email;
            GivenName = givenName;
            FirstName = firstName;
            LastName = lastName;
            Products = new ReadOnlyCollection<UserProduct>(products);
            Roles = roles?.ToList();
            Permissions = permissions;
            IsLoaded = true;
        }

        /// <summary>
        /// Checks whether the user has permission.
        /// </summary>
        /// <param name="product">Name of the product</param>
        /// <param name="permissionValue">Permission value</param>
        /// <returns>bool if has permission</returns>
        public bool HasPermission(string product, string permissionValue)
        {
            if (Permissions == null || !Permissions.Any())
                return false;

            return Permissions.Any(x =>
                x.Key.StartsWith(product, StringComparison.OrdinalIgnoreCase) &&
                x.Value.Any(y => y.Equals(permissionValue, StringComparison.OrdinalIgnoreCase)));
        }

        /// <summary>
        /// Sets user values based on values in an <see cref="IDictionary"/>.  
        /// This is used by middleware passing in request headers.
        /// This method simply pulls data out of the dictionary and calls SetUser.
        /// </summary>
        /// <param name="headers">Headers of the request.</param>
        public void SetUser(IDictionary<string, StringValues> headers)
        {
            headers.TryGetValue(nameof(UserId), out var userId);
            headers.TryGetValue(nameof(GivenName), out var givenName);
            headers.TryGetValue(nameof(FirstName), out var firstName);
            headers.TryGetValue(nameof(LastName), out var lastName);
            headers.TryGetValue(nameof(Email), out var email);
            headers.TryGetValue(nameof(TenantId), out var tenantId);
            headers.TryGetValue(nameof(TenantName), out var tenantName);
            headers.TryGetValue(nameof(TenantDisplayName), out var tenantDisplayName);
            headers.TryGetValue(nameof(Products), out var products);
            headers.TryGetValue(nameof(Roles), out var roles);

            var rolesGuids = new List<Guid>();
            if (!string.IsNullOrEmpty(roles))
                rolesGuids = ((string)roles).FromJson<List<Guid>>();

            var permissions = new Dictionary<string, List<string>>();

            foreach (var permissionGroup in headers.Where(x => x.Key.EndsWith(Globals.ClaimPermissionAppender)))
                permissions.Add(permissionGroup.Key, permissionGroup.Value.ToString().FromJson<List<string>>());

            SetUser(
                new Guid(userId),
                new Guid(tenantId),
                tenantName,
                tenantDisplayName,
                email,
                givenName,
                firstName,
                lastName,
                ((string)products).FromJson<List<UserProduct>>(),
                rolesGuids,
                permissions
               );
        }

        /// <summary>
        /// Takes identity user values from RabbitMq pipeline and converts them to IdentityUser.
        /// </summary>
        /// <param name="headers"></param>
        public void SetUser(IDictionary<string, string> headers)
        {
            headers.TryGetValue(nameof(UserId), out var userId);
            headers.TryGetValue(nameof(GivenName), out var givenName);
            headers.TryGetValue(nameof(FirstName), out var firstName);
            headers.TryGetValue(nameof(LastName), out var lastName);
            headers.TryGetValue(nameof(Email), out var email);
            headers.TryGetValue(nameof(TenantId), out var tenantId);
            headers.TryGetValue(nameof(TenantName), out var tenantName);
            headers.TryGetValue(nameof(TenantDisplayName), out var tenantDisplayName);
            headers.TryGetValue(nameof(Products), out var products);
            headers.TryGetValue(nameof(Roles), out var roles);
            headers.TryGetValue(nameof(Permissions), out var permissions);

            var rolesGuids = new List<Guid>();
            if (!string.IsNullOrEmpty(roles))
                rolesGuids = ((string)roles).FromJson<List<Guid>>();


            SetUser(
                new Guid(userId),
                new Guid(tenantId),
                tenantName,
                tenantDisplayName,
                email,
                givenName,
                firstName,
                lastName,
                products.FromJson<List<UserProduct>>(),
                rolesGuids,
                permissions?.FromJson<Dictionary<string, List<string>>>());
        }

        /// <summary>
        /// Gets the IdentityUser.
        /// </summary>
        /// <returns>Dictionary of User.</returns>
        public Dictionary<string, object> ToDictionary()
        {
            return new Dictionary<string, object>
            {
                { nameof(UserId), UserId.ToString() },
                { nameof(TenantId), TenantId.ToString() },
                { nameof(TenantName), TenantName },
                { nameof(TenantDisplayName), TenantDisplayName },
                { nameof(Email), Email },
                { nameof(GivenName), GivenName },
                { nameof(FirstName), FirstName },
                { nameof(LastName), LastName },
                { nameof(Products), Products?.ToJson() },
                { nameof(Roles), Roles?.ToJson() },
                { nameof(Permissions), Permissions?.ToJson() }
            };
        }
    }
}
